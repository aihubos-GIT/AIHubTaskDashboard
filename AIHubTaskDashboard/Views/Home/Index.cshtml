@model AIHubTaskDashboard.Controllers.DashboardViewModel
@{
    ViewBag.Title = "Dashboard";
}

<!-- Welcome Banner -->
<div class="mb-4">
    <h2 class="fw-bold text-primary">
        <i class="bi bi-speedometer2 me-2"></i>
        Dashboard Tổng Quan
    </h2>
    <p class="text-muted">Xin chào, @(Context.Session.GetString("FullName") ?? "User")! Đây là tổng quan công việc của bạn.</p>
</div>

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @ViewBag.Error
    </div>
}

@if (Model.TotalTasks == 0)
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle me-2"></i>
        Chưa có task nào. <a href="/Tasks/Create" class="alert-link">Tạo task đầu tiên</a>
    </div>
}
else
{
    <!-- KPI Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="card shadow-sm border-0 kpi-card h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="text-muted mb-1 small">Tổng số Task</p>
                            <h2 class="fw-bold mb-0">@Model.TotalTasks</h2>
                        </div>
                        <div class="kpi-icon bg-primary bg-opacity-10 rounded-circle p-3">
                            <i class="bi bi-list-task text-primary fs-3"></i>
                        </div>
                    </div>
                    <div class="mt-3">
                        <a href="/Tasks" class="btn btn-sm btn-outline-primary">Xem tất cả</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card shadow-sm border-0 kpi-card h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="text-muted mb-1 small">Hoàn thành</p>
                            <h2 class="fw-bold mb-0 text-success">@Model.CompletedTasks</h2>
                        </div>
                        <div class="kpi-icon bg-success bg-opacity-10 rounded-circle p-3">
                            <i class="bi bi-check-circle text-success fs-3"></i>
                        </div>
                    </div>
                    <div class="mt-3">
                        <span class="badge bg-success bg-opacity-10 text-success px-3 py-2">
                            <i class="bi bi-graph-up me-1"></i>
                            @Model.CompletionRate% completion rate
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card shadow-sm border-0 kpi-card h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="text-muted mb-1 small">Đang thực hiện</p>
                            <h2 class="fw-bold mb-0 text-warning">@Model.InProgressTasks</h2>
                        </div>
                        <div class="kpi-icon bg-warning bg-opacity-10 rounded-circle p-3">
                            <i class="bi bi-hourglass-split text-warning fs-3"></i>
                        </div>
                    </div>
                    <div class="mt-3">
                        <a href="/Tasks?status=In Progress" class="btn btn-sm btn-outline-warning">Chi tiết</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card shadow-sm border-0 kpi-card h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="text-muted mb-1 small">Quá hạn</p>
                            <h2 class="fw-bold mb-0 text-danger">@Model.OverdueTasks</h2>
                        </div>
                        <div class="kpi-icon bg-danger bg-opacity-10 rounded-circle p-3">
                            <i class="bi bi-exclamation-triangle text-danger fs-3"></i>
                        </div>
                    </div>
                    <div class="mt-3">
                        @if (Model.OverdueTasks > 0)
                        {
                            <span class="badge bg-danger bg-opacity-10 text-danger">
                                <i class="bi bi-alarm me-1"></i>
                                Cần xử lý!
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-success bg-opacity-10 text-success">
                                <i class="bi bi-check-lg me-1"></i>
                                On track
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row g-4 mb-4">
        <!-- Status Distribution Chart -->
        <div class="col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="bi bi-pie-chart text-primary me-2"></i>
                        Phân bố trạng thái
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="statusChart" style="max-height: 300px;"></canvas>
                </div>
            </div>
        </div>

        <!-- Progress Chart -->
        <div class="col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="bi bi-graph-up text-success me-2"></i>
                        Tiến độ tổng quan
                    </h5>
                </div>
                <div class="card-body d-flex flex-column justify-content-center">
                    <div class="text-center mb-4">
                        <h1 class="display-3 fw-bold text-primary mb-0">@Model.AverageProgress%</h1>
                        <p class="text-muted mb-0">Tiến độ trung bình</p>
                    </div>
                    <div class="progress" style="height: 30px;">
                        <div class="progress-bar bg-gradient" role="progressbar"
                             style="width: @Model.AverageProgress%;"
                             aria-valuenow="@Model.AverageProgress"
                             aria-valuemin="0"
                             aria-valuemax="100">
                            @Model.AverageProgress%
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Team Performance & Recent Tasks -->
    <div class="row g-4">
        <!-- Team Performance -->
        <div class="col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0 fw-bold">
                        <i class="bi bi-people text-info me-2"></i>
                        Hiệu suất theo thành viên
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.TasksByAssignee.Any())
                    {
                        <canvas id="teamChart"></canvas>
                    }
                    else
                    {
                        <p class="text-muted text-center py-4">Chưa có dữ liệu</p>
                    }
                </div>
            </div>
        </div>

        <!-- Recent Tasks -->
        <div class="col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-white border-0 py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0 fw-bold">
                            <i class="bi bi-clock-history text-warning me-2"></i>
                            Task gần đây
                        </h5>
                        <a href="/Tasks" class="btn btn-sm btn-outline-primary">Xem tất cả</a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        @if (Model.RecentTasks.Any())
                        {
                            @foreach (var task in Model.RecentTasks)
                            {
                                var title = task.TryGetProperty("title", out var t) ? t.GetString() : "Untitled";
                                var status = task.TryGetProperty("status", out var s) ? s.GetString() : "Unknown";
                                var progress = task.TryGetProperty("progress_percentage", out var p) ? p.GetInt32() : 0;
                                var taskId = task.TryGetProperty("task_id", out var id) ? id.GetInt32() : 0;

                                var statusClass = status?.ToLower() switch
                                {
                                    "to do" => "bg-secondary",
                                    "pending" => "bg-secondary",
                                    "in progress" => "bg-warning",
                                    "completed" => "bg-success",
                                    "done" => "bg-success",
                                    _ => "bg-secondary"
                                };

                                <a href="/Tasks/Edit/@taskId" class="list-group-item list-group-item-action border-0 mb-2 rounded hover-shadow">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="flex-grow-1 me-3">
                                            <h6 class="mb-1">@title</h6>
                                            <span class="badge @statusClass">@status</span>
                                        </div>
                                        <div class="text-end">
                                            <small class="text-muted fw-bold">@progress%</small>
                                            <div class="progress mt-1" style="width: 80px; height: 6px;">
                                                <div class="progress-bar bg-primary" style="width: @progress%;"></div>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            }
                        }
                        else
                        {
                            <p class="text-muted text-center py-4">Chưa có task nào</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (Model.TopPerformers.Any())
    {
        <!-- Top Performers -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-white border-0 py-3">
                        <h5 class="card-title mb-0 fw-bold">
                            <i class="bi bi-trophy text-warning me-2"></i>
                            Top Performers
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            @for (int i = 0; i < Model.TopPerformers.Count; i++)
                            {
                                var performer = Model.TopPerformers[i];
                                var medalIcon = i switch
                                {
                                    0 => "🥇",
                                    1 => "🥈",
                                    2 => "🥉",
                                    _ => "⭐"
                                };

                                <div class="col-md-4">
                                    <div class="card border">
                                        <div class="card-body text-center">
                                            <div class="display-4 mb-2">@medalIcon</div>
                                            <h5 class="fw-bold">@performer.AssigneeName</h5>
                                            <p class="text-muted mb-2">
                                                @performer.CompletedTasks/@performer.TotalTasks tasks hoàn thành
                                            </p>
                                            <div class="progress" style="height: 10px;">
                                                <div class="progress-bar bg-success" style="width: @performer.CompletionRate%;"></div>
                                            </div>
                                            <small class="text-success fw-bold">@performer.CompletionRate%</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<!-- Chart.js Scripts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script>
    @if (Model.TotalTasks > 0)
    {
        <text>
            // Status Distribution Pie Chart
            const statusCtx = document.getElementById('statusChart').getContext('2d');
            new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Pending', 'In Progress', 'Completed', 'Overdue'],
                    datasets: [{
                        data: [@Model.PendingTasks, @Model.InProgressTasks, @Model.CompletedTasks, @Model.OverdueTasks],
                        backgroundColor: [
                            'rgba(108, 117, 125, 0.8)',
                            'rgba(255, 193, 7, 0.8)',
                            'rgba(25, 135, 84, 0.8)',
                            'rgba(220, 53, 69, 0.8)'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });

            @if (Model.TasksByAssignee.Any())
            {
                <text>
                    // Team Performance Bar Chart
                    const teamCtx = document.getElementById('teamChart').getContext('2d');
                    new Chart(teamCtx, {
                        type: 'bar',
                        data: {
                            labels: [@Html.Raw(string.Join(",", Model.TasksByAssignee.Values.Select(a => $"'{a.AssigneeName}'")))],
                            datasets: [
                                {
                                    label: 'Total Tasks',
                                    data: [@string.Join(",", Model.TasksByAssignee.Values.Select(a => a.TotalTasks))],
                                    backgroundColor: 'rgba(13, 110, 253, 0.8)',
                                },
                                {
                                    label: 'Completed',
                                    data: [@string.Join(",", Model.TasksByAssignee.Values.Select(a => a.CompletedTasks))],
                                    backgroundColor: 'rgba(25, 135, 84, 0.8)',
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: true,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                }
                            }
                        }
                    });
                </text>
            }
        </text>
    }
</script>

<style>
    .kpi-card {
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .kpi-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
        }

    .kpi-icon {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .progress-bar.bg-gradient {
        background: linear-gradient(90deg, #0d6efd 0%, #0dcaf0 100%);
    }

    .hover-shadow {
        transition: box-shadow 0.2s;
    }

        .hover-shadow:hover {
            box-shadow: 0 0.125rem 0.5rem rgba(0, 0, 0, 0.1);
        }
</style>